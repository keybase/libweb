// Generated by IcedCoffeeScript 108.0.8
(function() {
  var Request, base, iced, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  base = require('../base/request');

  exports.Request = Request = (function(_super) {
    __extends(Request, _super);

    function Request(_arg) {
      var get_csrf_token;
      this.libs = _arg.libs, get_csrf_token = _arg.get_csrf_token;
      Request.__super__.constructor.call(this, {
        get_csrf_token: get_csrf_token
      });
    }

    Request.prototype.request = function(inargs, cb) {
      var body, err, headers, method, req_args, res, uri, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      method = inargs.method;
      headers = this._make_headers(inargs);
      uri = this.libs.url.parse(inargs.url);
      req_args = {
        uri: uri,
        headers: headers,
        method: method,
        jar: true,
        json: true
      };
      switch (method) {
        case 'GET':
        case 'DELETE':
          uri.query = inargs.params;
          req_args.uri = this.libs.url.format(uri);
          break;
        case 'POST':
          req_args.body = inargs.params;
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/node/request.iced",
            funcname: "Request.request"
          });
          _this.libs.request(req_args, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                res = arguments[1];
                return body = arguments[2];
              };
            })(),
            lineno: 32
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return _this._handle_response({
            err: err,
            inargs: inargs,
            body: body,
            http_status: typeof res !== "undefined" && res !== null ? res.statusCode : void 0
          }, cb);
        };
      })(this));
    };

    return Request;

  })(base.Request);

}).call(this);
