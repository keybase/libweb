// Generated by IcedCoffeeScript 108.0.8
(function() {
  var Account, KeyManager, WordArray, athrow, bufsplit, email_or_username_to_user, generate_pdpka, iced, kbpgp, make_esc, myslice, proofs, secret32_to_signing_kid, secret32_to_signing_km, triplesec, xor_buffers, __iced_k, __iced_k_noop,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  triplesec = require("triplesec");

  kbpgp = require('kbpgp');

  WordArray = triplesec.WordArray;

  KeyManager = kbpgp.KeyManager;

  make_esc = require('iced-error').make_esc;

  xor_buffers = require('../base/util').xor_buffers;

  athrow = require('iced-utils').util.athrow;

  proofs = require('keybase-proofs');

  myslice = function(buf, s, e) {
    var i, l, out, _i;
    l = e - s;
    out = new Buffer(l);
    for (i = _i = 0; 0 <= l ? _i < l : _i > l; i = 0 <= l ? ++_i : --_i) {
      out.writeUInt8(buf.readUInt8(i + s), i);
    }
    return out;
  };

  bufsplit = function(buf, lens) {
    var e, l, ret, s, _i, _len;
    s = 0;
    ret = [];
    for (_i = 0, _len = lens.length; _i < _len; _i++) {
      l = lens[_i];
      e = s + l;
      ret.push(myslice(buf, s, e));
      s = e;
    }
    return ret;
  };

  exports.Account = Account = (function() {
    function Account(_arg) {
      var C;
      this.config = _arg.config;
      C = this.config.C;
      this.triplesec_version = this.config.C.triplesec.version;
      this.nacl = {};
      this.lks = {};
      this.extra_keymaterial = C.pwh.derived_key_bytes + C.nacl.eddsa_secret_key_bytes + C.nacl.dh_secret_key_bytes + C.device.lks_client_half_bytes;
      this.new_tsenc();
    }

    Account.prototype.new_tsenc = function() {
      return this.enc = new triplesec.Encryptor({
        version: this.triplesec_version
      });
    };

    Account.prototype.resalt = function(_arg, cb) {
      var err, keys, progress_hook, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      salt = _arg.salt, progress_hook = _arg.progress_hook;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.resalt"
          });
          _this.enc.resalt({
            salt: salt,
            extra_keymaterial: _this.extra_keymaterial,
            progress_hook: progress_hook
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return keys = arguments[1];
              };
            })(),
            lineno: 60
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {
            throw err;
          }
          return cb(keys);
        };
      })(this));
    };

    Account.prototype.scrypt_hash_passphrase = function(_arg, cb) {
      var C, encoding, key, keys, km, progress_hook, pwh, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      key = _arg.key, salt = _arg.salt, progress_hook = _arg.progress_hook, encoding = _arg.encoding;
      key = new triplesec.Buffer(key, 'utf8');
      this.enc.set_key(key);
      C = this.config.C;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.scrypt_hash_passphrase"
          });
          _this.resalt({
            salt: salt,
            progress_hook: progress_hook
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return keys = arguments[0];
              };
            })(),
            lineno: 80
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref;
          km = keys.extra;
          _ref = bufsplit(km, [C.pwh.derived_key_bytes, C.nacl.eddsa_secret_key_bytes, C.nacl.dh_secret_key_bytes, C.device.lks_client_half_bytes]), pwh = _ref[0], _this.nacl.eddsa = _ref[1], _this.nacl.dh = _ref[2], _this.lks.clienf_half = _ref[3];
          if (encoding != null) {
            pwh = pwh.toString(encoding);
          }
          return cb(pwh, _this.nacl.eddsa);
        };
      })(this));
    };

    Account.prototype.fix_signup_bundle = function(bundle, cb) {
      var err, nb, salt, secret32_eddsa, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      nb = triplesec.V[this.triplesec_version].salt_size;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.fix_signup_bundle"
          });
          kbpgp.rand.SRF().random_bytes(nb, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return salt = arguments[0];
              };
            })(),
            lineno: 97
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
              funcname: "Account.fix_signup_bundle"
            });
            _this.scrypt_hash_passphrase({
              key: bundle.pw,
              salt: salt,
              encoding: 'hex'
            }, __iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  __slot_1.pwh = arguments[0];
                  return secret32_eddsa = arguments[1];
                };
              })(bundle),
              lineno: 98
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                funcname: "Account.fix_signup_bundle"
              });
              secret32_to_signing_kid({
                secret32: secret32_eddsa
              }, __iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    err = arguments[0];
                    return __slot_1.pdpka5_kid = arguments[1];
                  };
                })(bundle),
                lineno: 99
              }));
              __iced_deferrals._fulfill();
            })(function() {
              bundle.salt = salt.toString('hex');
              bundle.pwh_version = _this.triplesec_version;
              delete bundle.pw;
              return cb(err);
            });
          });
        };
      })(this));
    };

    Account.prototype.gen_new_pwh = function(_arg, cb) {
      var pw, pwh, pwh_version, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pw = _arg.pw, salt = _arg.salt;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.gen_new_pwh"
          });
          _this.scrypt_hash_passphrase({
            key: pw,
            salt: salt,
            encoding: 'hex'
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return pwh = arguments[0];
              };
            })(),
            lineno: 114
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          pwh_version = _this.triplesec_version;
          return cb(null, pwh, pwh_version);
        };
      })(this));
    };

    Account.prototype.pw_to_pwh = function(_arg, cb) {
      var email_or_username, err, esc, got, params, pdpka4_km, pdpka5_km, pw, pwh, pwh_version, res, salt, secret32_eddsa, uid, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pw = _arg.pw, email_or_username = _arg.email_or_username, uid = _arg.uid;
      esc = make_esc(cb, "pw_to_pwh");
      err = pwh = pwh_version = salt = null;
      params = {
        email_or_username: email_or_username,
        uid: uid,
        pdpka_login: true
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.pw_to_pwh"
          });
          _this.config.request({
            method: "GET",
            endpoint: 'getsalt',
            params: params
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return res = arguments[0];
              };
            })(),
            lineno: 131
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (err != null) {
              return __iced_k();
            } else {
              (function(__iced_k) {
                var _ref;
                if (!((got = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? _ref.pwh_version : void 0 : void 0) === _this.triplesec_version)) {
                  return __iced_k(err = new Error("Can only support PW hash version " + _this.triplesec_version + "; got " + got + " for " + (_this.config.escape_user_content(email_or_username))));
                } else {
                  salt = new triplesec.Buffer(res.body.salt, 'hex');
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                      funcname: "Account.pw_to_pwh"
                    });
                    _this.scrypt_hash_passphrase({
                      salt: salt,
                      key: pw,
                      encoding: null
                    }, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          pwh = arguments[0];
                          return secret32_eddsa = arguments[1];
                        };
                      })(),
                      lineno: 137
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                        funcname: "Account.pw_to_pwh"
                      });
                      secret32_to_signing_km({
                        secret32: pwh
                      }, esc(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return pdpka4_km = arguments[0];
                          };
                        })(),
                        lineno: 138
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                          funcname: "Account.pw_to_pwh"
                        });
                        secret32_to_signing_km({
                          secret32: secret32_eddsa
                        }, esc(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return pdpka5_km = arguments[0];
                            };
                          })(),
                          lineno: 139
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        return __iced_k(pwh_version = _this.triplesec_version);
                      });
                    });
                  });
                }
              })(__iced_k);
            }
          })(function() {
            var _ref;
            return cb(err, pwh, pwh_version, salt, typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? _ref.login_session : void 0 : void 0, pdpka4_km, pdpka5_km);
          });
        };
      })(this));
    };

    Account.prototype.pw_to_login = function(_arg, cb) {
      var email_or_username, esc, hmac, hmac_pwh, hostname, login_session, login_session_b64, pdpka4, pdpka4_km, pdpka5, pdpka5_km, pw, pwh, pwh_version, salt, session, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pw = _arg.pw, email_or_username = _arg.email_or_username, hostname = _arg.hostname;
      esc = make_esc(cb, "pw_to_login");
      login_session = hmac_pwh = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.pw_to_login"
          });
          _this.pw_to_pwh({
            pw: pw,
            email_or_username: email_or_username
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                pwh = arguments[0];
                pwh_version = arguments[1];
                salt = arguments[2];
                login_session_b64 = arguments[3];
                pdpka4_km = arguments[4];
                return pdpka5_km = arguments[5];
              };
            })(),
            lineno: 148
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          login_session = new triplesec.Buffer(login_session_b64, 'base64');
          hmac = new triplesec.HMAC(WordArray.from_buffer(pwh));
          hmac_pwh = hmac.update(WordArray.from_buffer(login_session)).finalize().to_hex();
          session = login_session = login_session_b64;
          user = email_or_username_to_user({
            email_or_username: email_or_username
          });
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
              funcname: "Account.pw_to_login"
            });
            generate_pdpka({
              km: pdpka4_km,
              user: user,
              session: session,
              hostname: hostname
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return pdpka4 = arguments[0];
                };
              })(),
              lineno: 156
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                funcname: "Account.pw_to_login"
              });
              generate_pdpka({
                km: pdpka5_km,
                user: user,
                session: session,
                hostname: hostname
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return pdpka5 = arguments[0];
                  };
                })(),
                lineno: 157
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null, login_session, hmac_pwh, salt, pdpka4, pdpka5);
            });
          });
        };
      })(this));
    };

    Account.prototype.get_public_pgp_key = function(username, cb) {
      var err, fields, res, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      fields = "public_keys";
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.get_public_pgp_key"
          });
          _this.config.request({
            endpoint: "user/lookup",
            params: {
              username: username,
              fields: fields
            }
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return res = arguments[1];
              };
            })(),
            lineno: 166
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref, _ref1, _ref2, _ref3;
          if (err == null) {
            ret = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? (_ref1 = _ref.them) != null ? (_ref2 = _ref1.public_keys) != null ? (_ref3 = _ref2.primary) != null ? _ref3.bundle : void 0 : void 0 : void 0 : void 0 : void 0;
            if (ret == null) {
              err = new Error("Cannot find a public key for '" + (_this.config.escape_user_content(username)) + "'");
            }
          }
          return cb(err, ret);
        };
      })(this));
    };

    Account.prototype.get_devices = function(_arg, cb) {
      var err, fields, res, ret, username, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      username = _arg.username;
      err = ret = null;
      fields = "devices";
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.get_devices"
          });
          _this.config.request({
            endpoint: "user/lookup",
            params: {
              username: username,
              fields: fields
            }
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return res = arguments[1];
              };
            })(),
            lineno: 177
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref, _ref1;
          if (err == null) {
            ret = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? (_ref1 = _ref.them) != null ? _ref1.devices : void 0 : void 0 : void 0;
            if (ret == null) {
              err = new Error("Cannot find devices for '" + (_this.config.escape_user_content(username)));
            }
          }
          return cb(err, ret);
        };
      })(this));
    };

    Account.prototype.get_public_pgp_keys = function(username, cb) {
      var err, fields, res, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      fields = "public_keys";
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.get_public_pgp_keys"
          });
          _this.config.request({
            endpoint: "user/lookup",
            params: {
              username: username
            }
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return res = arguments[1];
              };
            })(),
            lineno: 188
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref, _ref1, _ref2;
          if (err == null) {
            ret = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? (_ref1 = _ref.them) != null ? (_ref2 = _ref1.public_keys) != null ? _ref2.pgp_public_keys : void 0 : void 0 : void 0 : void 0;
            if (!(ret != null ? ret.length : void 0)) {
              err = new Error("Cannot find a public key for '" + (_this.config.escape_user_content(username)) + "'");
            }
          }
          return cb(err, ret);
        };
      })(this));
    };

    Account.prototype.get_unlocked_private_primary_pgp_key = function(pw, cb) {
      return this.get_unlocked_private_pgp_key({
        pw: pw
      }, cb);
    };

    Account.prototype.get_unlocked_private_pgp_key = function(_arg, cb) {
      var bundle, err, esc, kid, passphrase, pw, res, sk, tsenc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pw = _arg.pw, kid = _arg.kid;
      esc = make_esc(function(err) {
        return cb(err, null);
      });
      passphrase = new triplesec.Buffer(pw);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.get_unlocked_private_pgp_key"
          });
          _this.config.request({
            method: "GET",
            endpoint: "me"
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return res = arguments[0];
              };
            })(),
            lineno: 204
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
          bundle = null;
          if (kid != null) {
            _ref3 = typeof res !== "undefined" && res !== null ? (_ref = res.body) != null ? (_ref1 = _ref.me) != null ? (_ref2 = _ref1.private_keys) != null ? _ref2.all : void 0 : void 0 : void 0 : void 0;
            for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
              sk = _ref3[_i];
              if (sk.kid === kid) {
                if ((bundle = sk.bundle) != null) {
                  break;
                }
              }
            }
          } else {
            bundle = typeof res !== "undefined" && res !== null ? (_ref4 = res.body) != null ? (_ref5 = _ref4.me) != null ? (_ref6 = _ref5.private_keys) != null ? (_ref7 = _ref6.primary) != null ? _ref7.bundle : void 0 : void 0 : void 0 : void 0 : void 0;
          }
          sk = err = null;
          (function(__iced_k) {
            if (bundle != null) {
              tsenc = _this.get_tsenc_for_decryption({
                passphrase: passphrase
              });
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                  funcname: "Account.get_unlocked_private_pgp_key"
                });
                KeyManager.import_from_p3skb({
                  raw: bundle
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return sk = arguments[0];
                    };
                  })(),
                  lineno: 217
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                    funcname: "Account.get_unlocked_private_pgp_key"
                  });
                  sk.unlock_p3skb({
                    tsenc: tsenc
                  }, esc(__iced_deferrals.defer({
                    lineno: 218
                  })));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              });
            } else {
              return __iced_k();
            }
          })(function() {
            err = null;
            if (sk == null) {
              err = new Error("Failed to get and unlock your private key");
            }
            return cb(err, sk);
          });
        };
      })(this));
    };

    Account.prototype.get_unlocked_private_pgp_keys = function(pw, cb) {
      var esc, passphrase, res, sk, sks, tsenc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "get_unlocked_private_pgp_keys");
      sks = [];
      passphrase = new triplesec.Buffer(pw);
      tsenc = this.get_tsenc_for_decryption({
        passphrase: passphrase
      });
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.get_unlocked_private_pgp_keys"
          });
          _this.config.request({
            method: "GET",
            endpoint: "me"
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return res = arguments[0];
              };
            })(),
            lineno: 231
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            var _i, _len, _ref, _ref1, _ref2, _ref3, _results, _while;
            _ref = typeof res !== "undefined" && res !== null ? (_ref1 = res.body) != null ? (_ref2 = _ref1.me) != null ? (_ref3 = _ref2.private_keys) != null ? _ref3.all : void 0 : void 0 : void 0 : void 0;
            _len = _ref.length;
            _i = 0;
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = __iced_k;
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = _continue;
              if (!(_i < _len)) {
                return _break();
              } else {
                sk = _ref[_i];
                if (sk.type === _this.config.C.key.key_type.P3KSB_PRIVATE) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                      funcname: "Account.get_unlocked_private_pgp_keys"
                    });
                    KeyManager.import_from_p3skb({
                      raw: sk.bundle
                    }, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return sk = arguments[0];
                        };
                      })(),
                      lineno: 233
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                        funcname: "Account.get_unlocked_private_pgp_keys"
                      });
                      sk.unlock_p3skb({
                        tsenc: tsenc.clone()
                      }, esc(__iced_deferrals.defer({
                        lineno: 234
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      return _next(sks.push(sk));
                    });
                  });
                } else {
                  return _continue();
                }
              }
            };
            _while(__iced_k);
          })(function() {
            return cb(err, sks);
          });
        };
      })(this));
    };

    Account.prototype.export_my_private_key = function(_arg, cb) {
      var armored_private, err, esc, kid, passphrase, pw, sk, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      kid = _arg.kid, pw = _arg.pw;
      esc = make_esc(cb, "export_my_private_key");
      err = armored_private = null;
      passphrase = new triplesec.Buffer(pw);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.export_my_private_key"
          });
          _this.get_unlocked_private_pgp_key({
            kid: kid,
            pw: pw
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return sk = arguments[0];
              };
            })(),
            lineno: 244
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
              funcname: "Account.export_my_private_key"
            });
            sk.sign({}, esc(__iced_deferrals.defer({
              lineno: 245
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                funcname: "Account.export_my_private_key"
              });
              sk.export_pgp_private_to_client({
                passphrase: passphrase
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return armored_private = arguments[0];
                  };
                })(),
                lineno: 246
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null, armored_private);
            });
          });
        };
      })(this));
    };

    Account.prototype._change_passphrase_derive_passphrase_components = function(_arg, cb) {
      var C, esc, key, keys, km, lks_client_half, passphrase, pwh, salt, tsenc, _, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      tsenc = _arg.tsenc, salt = _arg.salt, passphrase = _arg.passphrase;
      esc = make_esc(cb, "_change_passphrase_derive_passphrase_components");
      key = new Buffer(passphrase, 'utf8');
      C = this.config.C;
      tsenc || (tsenc = new triplesec.Encryptor({
        version: this.triplesec_version
      }));
      tsenc.set_key(key);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account._change_passphrase_derive_passphrase_components"
          });
          tsenc.resalt({
            extra_keymaterial: _this.extra_keymaterial,
            salt: salt
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return keys = arguments[0];
              };
            })(),
            lineno: 259
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref;
          km = keys.extra;
          _ref = bufsplit(km, [C.pwh.derived_key_bytes, C.nacl.eddsa_secret_key_bytes, C.nacl.dh_secret_key_bytes, C.device.lks_client_half_bytes]), pwh = _ref[0], _ = _ref[1], _ = _ref[2], lks_client_half = _ref[3];
          return cb(null, {
            tsenc: tsenc,
            pwh: pwh,
            lks_client_half: lks_client_half
          });
        };
      })(this));
    };

    Account.prototype._change_passphrase_encrypt_lks_client_half = function(_arg, cb) {
      var client_half, deviceid, esc, key_role, keys, kid, km, me, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      me = _arg.me, client_half = _arg.client_half;
      ret = {};
      esc = make_esc(cb, "_change_passphrase_encrypt_lks_client_half");
      (function(_this) {
        return (function(__iced_k) {
          var _i, _k, _keys, _ref, _results, _while;
          _ref = me.devices;
          _keys = (function() {
            var _results1;
            _results1 = [];
            for (_k in _ref) {
              _results1.push(_k);
            }
            return _results1;
          })();
          _i = 0;
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_i < _keys.length)) {
              return _break();
            } else {
              deviceid = _keys[_i];
              keys = _ref[deviceid].keys;
              (function(__iced_k) {
                var _j, _len, _ref1, _results1, _while;
                _ref1 = keys;
                _len = _ref1.length;
                _j = 0;
                _while = function(__iced_k) {
                  var _break, _continue, _next, _ref2;
                  _break = __iced_k;
                  _continue = function() {
                    return iced.trampoline(function() {
                      ++_j;
                      return _while(__iced_k);
                    });
                  };
                  _next = _continue;
                  if (!(_j < _len)) {
                    return _break();
                  } else {
                    _ref2 = _ref1[_j], kid = _ref2.kid, key_role = _ref2.key_role;
                    if (key_role === _this.config.C.key.key_role.ENCRYPTION) {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                          funcname: "Account._change_passphrase_encrypt_lks_client_half"
                        });
                        kbpgp.ukm.import_armored_public({
                          armored: kid
                        }, esc(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return km = arguments[0];
                            };
                          })(),
                          lineno: 276
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                            funcname: "Account._change_passphrase_encrypt_lks_client_half"
                          });
                          kbpgp.kb.box({
                            encrypt_for: km,
                            msg: client_half
                          }, esc(__iced_deferrals.defer({
                            assign_fn: (function(__slot_1, __slot_2) {
                              return function() {
                                return __slot_1[__slot_2] = arguments[0];
                              };
                            })(ret, kid),
                            lineno: 277
                          })));
                          __iced_deferrals._fulfill();
                        })(_next);
                      });
                    } else {
                      return _continue();
                    }
                  }
                };
                _while(__iced_k);
              })(_next);
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, ret);
        };
      })(this));
    };

    Account.prototype._change_passphrase_reencrypt_pgp_private_keys = function(_arg, cb) {
      var bundle, esc, exclude_kids, kid, km, me, new_ppc, old_ppc, output, outputs, passphrase_generation, tsenc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      me = _arg.me, old_ppc = _arg.old_ppc, new_ppc = _arg.new_ppc, exclude_kids = _arg.exclude_kids;
      outputs = [];
      exclude_kids || (exclude_kids = []);
      esc = make_esc(cb, "_change_passphrase_reencrypt_pgp_private_key");
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref, _ref1, _results, _while;
          _ref = (me != null ? (_ref1 = me.private_keys) != null ? _ref1.all : void 0 : void 0) || [];
          _len = _ref.length;
          _i = 0;
          _while = function(__iced_k) {
            var _break, _continue, _next, _ref2;
            _break = __iced_k;
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = _continue;
            if (!(_i < _len)) {
              return _break();
            } else {
              _ref2 = _ref[_i], kid = _ref2.kid, bundle = _ref2.bundle;
              if (!(__indexOf.call(exclude_kids, kid) >= 0)) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                    funcname: "Account._change_passphrase_reencrypt_pgp_private_keys"
                  });
                  KeyManager.import_from_p3skb({
                    armored: bundle
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return km = arguments[0];
                      };
                    })(),
                    lineno: 287
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                      funcname: "Account._change_passphrase_reencrypt_pgp_private_keys"
                    });
                    km.unlock_p3skb({
                      tsenc: old_ppc.tsenc.clone()
                    }, esc(__iced_deferrals.defer({
                      lineno: 288
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    tsenc = new_ppc.tsenc, passphrase_generation = new_ppc.passphrase_generation;
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                        funcname: "Account._change_passphrase_reencrypt_pgp_private_keys"
                      });
                      km.export_private_to_server({
                        tsenc: tsenc,
                        passphrase_generation: passphrase_generation
                      }, esc(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return output = arguments[0];
                          };
                        })(),
                        lineno: 290
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      return _next(outputs.push(output));
                    });
                  });
                });
              } else {
                return _continue();
              }
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, outputs);
        };
      })(this));
    };

    Account.prototype._change_passphrase_compute_lks_mask = function(_arg, cb) {
      var lks_mask, new_ppc, old_ppc;
      old_ppc = _arg.old_ppc, new_ppc = _arg.new_ppc;
      lks_mask = xor_buffers(old_ppc.lks_client_half, new_ppc.lks_client_half).toString('hex');
      return cb(null, lks_mask);
    };

    Account.prototype.change_passphrase = function(_arg, cb) {
      var esc, exclude_kids, lks_mask, lksch, me, new_pp, new_ppc, old_pp, old_ppc, params, private_keys, res, salt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      old_pp = _arg.old_pp, new_pp = _arg.new_pp, exclude_kids = _arg.exclude_kids;
      old_ppc = new_ppc = null;
      esc = make_esc(cb, "change_passphrase");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.change_passphrase"
          });
          _this.config.request({
            method: "GET",
            endpoint: "me"
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return res = arguments[0];
              };
            })(),
            lineno: 318
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            var _ref;
            if ((me = res != null ? (_ref = res.body) != null ? _ref.me : void 0 : void 0) == null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                  funcname: "Account.change_passphrase"
                });
                athrow(new Error("Cannot load 'me' from server"), esc(__iced_deferrals.defer({
                  lineno: 320
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            salt = new Buffer(me.basics.salt, 'hex');
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                funcname: "Account.change_passphrase"
              });
              _this._change_passphrase_derive_passphrase_components({
                tsenc: _this.enc,
                salt: salt,
                passphrase: old_pp
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return old_ppc = arguments[0];
                  };
                })(),
                lineno: 324
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                  funcname: "Account.change_passphrase"
                });
                _this._change_passphrase_derive_passphrase_components({
                  salt: salt,
                  passphrase: new_pp
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return new_ppc = arguments[0];
                    };
                  })(),
                  lineno: 325
                })));
                __iced_deferrals._fulfill();
              })(function() {
                old_ppc.passphrase_generation = me.basics.passphrase_generation;
                new_ppc.passphrase_generation = old_ppc.passphrase_generation + 1;
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                    funcname: "Account.change_passphrase"
                  });
                  _this._change_passphrase_encrypt_lks_client_half({
                    me: me,
                    client_half: new_ppc.lks_client_half
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return lksch = arguments[0];
                      };
                    })(),
                    lineno: 330
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                      funcname: "Account.change_passphrase"
                    });
                    _this._change_passphrase_reencrypt_pgp_private_keys({
                      me: me,
                      old_ppc: old_ppc,
                      new_ppc: new_ppc,
                      exclude_kids: exclude_kids
                    }, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return private_keys = arguments[0];
                        };
                      })(),
                      lineno: 331
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                        funcname: "Account.change_passphrase"
                      });
                      _this._change_passphrase_compute_lks_mask({
                        old_ppc: old_ppc,
                        new_ppc: new_ppc
                      }, esc(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return lks_mask = arguments[0];
                          };
                        })(),
                        lineno: 332
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      params = {
                        oldpwh: old_ppc.pwh.toString('hex'),
                        pwh: new_ppc.pwh.toString('hex'),
                        pwh_version: _this.triplesec_version,
                        ppgen: old_ppc.passphrase_generation,
                        lks_mask: lks_mask,
                        lks_client_halves: JSON.stringify(lksch),
                        private_keys: private_keys
                      };
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
                          funcname: "Account.change_passphrase"
                        });
                        _this.config.request({
                          method: "POST",
                          endpoint: "passphrase/replace",
                          params: params
                        }, esc(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return res = arguments[0];
                            };
                          })(),
                          lineno: 343
                        })));
                        __iced_deferrals._fulfill();
                      })(function() {
                        _this.enc = new_ppc.tsenc;
                        return cb(null, new_ppc);
                      });
                    });
                  });
                });
              });
            });
          });
        };
      })(this));
    };

    Account.prototype.get_tsenc_for_decryption = function(_arg) {
      var passphrase;
      passphrase = _arg.passphrase;
      this.enc.set_key(passphrase);
      return this.enc;
    };

    Account.prototype.gen_nacl_eddsa_key = function(params, cb) {
      var err, gen, km, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      gen = kbpgp.kb.KeyManager.generate;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.gen_nacl_eddsa_key"
          });
          gen({
            seed: _this.nacl.eddsa,
            split: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return km = arguments[1];
              };
            })(),
            lineno: 360
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, km);
        };
      })(this));
    };

    Account.prototype.gen_nacl_dh_key = function(params, cb) {
      var err, gen, km, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      gen = kbpgp.kb.EncKeyManager.generate;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced",
            funcname: "Account.gen_nacl_dh_key"
          });
          gen({
            seed: _this.nacl.dh,
            split: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return km = arguments[1];
              };
            })(),
            lineno: 367
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, km);
        };
      })(this));
    };

    return Account;

  })();

  exports.secret32_to_signing_km = secret32_to_signing_km = function(_arg, cb) {
    var err, kid, km, ret, secret32, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    secret32 = _arg.secret32;
    ret = err = null;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced"
        });
        kbpgp.kb.KeyManager.generate({
          seed: secret32,
          split: false
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return km = arguments[1];
            };
          })(),
          lineno: 374
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        (function(__iced_k) {
          if (err == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced"
              });
              km.export_public({}, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return kid = arguments[1];
                  };
                })(),
                lineno: 376
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          return cb(err, km);
        });
      };
    })(this));
  };

  exports.secret32_to_signing_kid = secret32_to_signing_kid = function(_arg, cb) {
    var err, kid, km, ret, secret32, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    secret32 = _arg.secret32;
    ret = err = null;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced"
        });
        secret32_to_signing_km({
          secret32: secret32
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return km = arguments[1];
            };
          })(),
          lineno: 383
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        (function(__iced_k) {
          if (err == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced"
              });
              km.export_public({}, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return kid = arguments[1];
                  };
                })(),
                lineno: 385
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          return cb(err, kid, km);
        });
      };
    })(this));
  };

  exports.generate_pdpka = generate_pdpka = function(_arg, cb) {
    var arg, eng, err, hostname, km, nonce, session, sig, user, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    km = _arg.km, session = _arg.session, user = _arg.user, hostname = _arg.hostname;
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced"
        });
        kbpgp.rand.SRF().random_bytes(16, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return nonce = arguments[0];
            };
          })(),
          lineno: 391
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        arg = {
          sig_eng: km.make_sig_eng(),
          host: hostname,
          user: {
            local: user
          }
        };
        if (typeof nonce !== "undefined" && nonce !== null) {
          arg.nonce = nonce;
        }
        if (session != null) {
          arg.session = session;
        }
        eng = new proofs.Auth(arg);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/libweb-js/src/hilevel/account.iced"
          });
          eng.generate(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return sig = arguments[1];
              };
            })(),
            lineno: 399
          }));
          __iced_deferrals._fulfill();
        })(function() {
          return cb(err, typeof sig !== "undefined" && sig !== null ? sig.armored : void 0);
        });
      };
    })(this));
  };

  email_or_username_to_user = function(_arg) {
    var email_or_username, user;
    email_or_username = _arg.email_or_username;
    user = {};
    if (email_or_username.indexOf('@') >= 0) {
      user.email = email_or_username;
    } else {
      user.username = email_or_username;
    }
    return user;
  };

}).call(this);
